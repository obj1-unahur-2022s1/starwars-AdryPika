/*
 * No era necesario utilizar un initialize(). En la creación de las instancias 
 * se podía indicar los valores de cada persona.
 * Faltan los test pedidos sobre Perla: entrene 15 días y aprenda una técnica. 
 * Después de eso, la potencia tiene que ser 65, y todavía no tiene que ser destacada. 
 * Después hacer que aprenda una técnica más. Después de aprender esta segunda 
 * técnica adicional, Perla tiene que ser destacada.
 */

import personas.*
import planetas.*


describe "Test sobre escenario Basico"{
	const julieta = new Personas(edad=42)
	const ana = new Atletas(edad=25)
	const rosa = new Atletas(edad=45, cantTecnicasConoce=8)
	const perla = new Atletas(edad=28, cantTecnicasConoce=4, masaMuscular=6)
	const monica = new Docentes(edad=45, cursosQueDio = 6)
	const luisa = new Docentes(edad=35, cursosQueDio = 1 )
	
	const triton = new Planeta(habitantes=[julieta, ana, rosa, perla, monica, luisa])
	/* no debe aparecer código comentado 
	//const juan = new Soldados(edad= 50, coleccionArmas=[pistolete])
	// const pistolete = new Pistolete(largoEnCm= 8)
	*/

/*
 * Esto se podía definir en la creación de las instancias (personas)
method initialize(){
	rosa.cantTecnicasConoce(8)
	perla.cantTecnicasConoce(4)
	perla.masaMuscular(6)
	//juan.coleccioArmas([pistolete])
}
 */

method fase1() {
	perla.entrenar(15)
	perla.aprenderTecnica()
}

method fase2() {
	perla.aprenderTecnica()
}


test "Julieta potencia 20"{
	assert.equals(20, julieta.potencia())	
}
test "Ana potencia 28"{
	assert.equals(28, ana.potencia())
}
test "rosa potencia 52"{
	assert.equals(52, rosa.potencia())
}
test "perla potencia 44"{
	assert.equals(44, perla.potencia())
}
test "monica potencia 20"{
	assert.equals(20, monica.potencia())
}
test "luisa potencia 20"{
	assert.equals(20, luisa.potencia())
}
test "julieta inteligencia 8"{
	assert.equals(8, julieta.inteligencia())
}
test "ana inteligencia 12"{
	assert.equals(12, ana.inteligencia())
}
test "rosa inteligencia 8"{
	assert.equals(8, rosa.inteligencia())
}
test "perla inteligencia 12"{
	assert.equals(12, perla.inteligencia())
}
test "monica inteligencia 20"{
	assert.equals(20, monica.inteligencia())
}
test "luisa inteligencia 14"{
	assert.equals(14, luisa.inteligencia())
}

test "julieta no es destacada"{
	assert.notThat(julieta.esDestacada())
}
test "ana es destacada"{
	assert.that(ana.esDestacada())
}
test "rosa es destacada"{
	assert.that(rosa.esDestacada())
}
test "perla no es destacada"{
	assert.notThat(perla.esDestacada())
}
test "monica es destacada"{
	assert.that(monica.esDestacada())
}
test "luisa no es destacada"{
	assert.notThat(luisa.esDestacada())
}


test "triton delegacion diplomatica"{
	assert.equals([ana, rosa, monica], triton.delegacionDiplomatica())
}
test "triton valor inicial de defensa"{
	assert.equals(2, triton.valorInicialDefensa())
}
test "triton no es culto"{
	assert.notThat(triton.esCulto())
}
test "triton potenciaReal"{
	assert.equals(184, triton.potenciaReal())
}



test "perla entrena 15 días y aprende 1 tecnica, potencia debe ser 65" {
	self.fase1()
	assert.equals(65,perla.potencia())
}

test "perla entrena 15 días y aprende 1 tecnica, no es destacada" {
	self.fase1()
	assert.notThat(perla.esDestacada())
}

test "perla aprende otra técnica, ahora es destacada" {
	self.fase1()
	self.fase2()
	assert.that(perla.esDestacada())
}

}

